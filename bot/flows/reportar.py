from telegram import Update
from telegram.ext import ContextTypes, ConversationHandler, MessageHandler, filters
from bot.utils import procesar_texto

# Definimos los estados como constantes
PREGUNTAR_LUGAR, PREGUNTAR_HORA, PREGUNTAR_DESCRIPCION, CONFIRMAR_REPORTE = range(4)

async def iniciar_reporte(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Inicia el flujo de reporte."""
    await update.message.reply_text(
        "üìç *¬øD√≥nde ocurri√≥ la agresi√≥n?*\n"
        "Ejemplos: _'Patio norte', 'Ba√±os de primaria', 'Sal√≥n 5A'_",
        parse_mode="Markdown"
    )
    return PREGUNTAR_LUGAR

async def manejar_lugar(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Procesa la respuesta del lugar"""
    texto = update.message.text
    lugar = procesar_texto(texto, ["patio", "ba√±os", "sal√≥n", "comedor"])
    
    if lugar:
        context.user_data["lugar"] = lugar
        await update.message.reply_text(
            "‚è∞ *¬øA qu√© hora ocurri√≥?*\nFormato: _'12:30 PM', 'Hace 10 minutos'_",
            parse_mode="Markdown"
        )
        return PREGUNTAR_HORA
    else:
        await update.message.reply_text(
            "‚ùå No reconozco ese lugar. Intenta con: _'patio', 'ba√±os', 'sal√≥n'_",
            parse_mode="Markdown"
        )
        return PREGUNTAR_LUGAR  # Repite el estado actual

async def manejar_hora(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Procesa la respuesta de la hora."""
    context.user_data["hora"] = update.message.text
    await update.message.reply_text(
        "üìù *Describe lo ocurrido:*\nMenciona qui√©nes estaban involucrados y qu√© pas√≥.",
        parse_mode="Markdown"
    )
    return PREGUNTAR_DESCRIPCION

async def manejar_descripcion(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Procesa la descripci√≥n y pide confirmaci√≥n."""
    context.user_data["descripcion"] = update.message.text
    resumen = (
        "üìã *Resumen del Reporte:*\n\n"
        f"üìç Lugar: {context.user_data['lugar']}\n"
        f"‚è∞ Hora: {context.user_data['hora']}\n"
        f"üìù Descripci√≥n: {update.message.text}\n\n"
        "¬øConfirmas que esta informaci√≥n es correcta? (S√≠/No)"
    )
    await update.message.reply_text(resumen, parse_mode="Markdown")
    return CONFIRMAR_REPORTE

async def confirmar_reporte(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Procesa la confirmaci√≥n final."""
    if update.message.text.lower() in ["s√≠", "si", "yes"]:
        # Aqu√≠ puedes guardar en base de datos
        await update.message.reply_text(
            "‚úÖ *Reporte enviado correctamente.*\nEl equipo escolar tomar√° acci√≥n.",
            parse_mode="Markdown"
        )
    else:
        await update.message.reply_text("‚úèÔ∏è Vamos a empezar de nuevo.")
        return await iniciar_reporte(update, context)  # Reinicia el flujo
    return ConversationHandler.END  # Termina el flujo

# Handler para cancelar en cualquier momento
async def cancelar(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå Reporte cancelado.")
    return ConversationHandler.END
