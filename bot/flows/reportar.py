
from telegram import Update,ReplyKeyboardMarkup,ReplyKeyboardRemove

from telegram.ext import ContextTypes, ConversationHandler, MessageHandler, filters
from utils import procesar_texto
#from telegram import ReplyKeyboardMarkup

# Definimos los estados como constantes
PREGUNTAR_LUGAR, PREGUNTAR_HORA, PREGUNTAR_DESCRIPCION, CONFIRMAR_REPORTE, PREGUNTAR_VOLVER_MENU = range(5)

async def iniciar_reporte(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Inicia el flujo de reporte."""
    await update.message.reply_text(
        "üìç *¬øD√≥nde ocurri√≥ la agresi√≥n?*\n"
        "Ejemplos: _'Patio norte', 'Ba√±os de primaria', 'Sal√≥n 5A'_",
        parse_mode="Markdown"
    )
    return PREGUNTAR_LUGAR

async def manejar_lugar(update: Update, context: ContextTypes.DEFAULT_TYPE):

    """Procesa la respuesta del lugar."""

    texto = update.message.text
    lugar = procesar_texto(texto, ["patio", "canchas", "ba√±os", "sal√≥n", "comedor"])
    
    if lugar:
        context.user_data["lugar"] = lugar
        await update.message.reply_text(
            "‚è∞ *¬øA qu√© hora ocurri√≥?*\nFormato: _'12:30 PM', 'Hace 10 minutos'_",
            parse_mode="Markdown"
        )
        return PREGUNTAR_HORA
    else:
        await update.message.reply_text(
            "‚ùå No reconozco ese lugar. Intenta con: _'patio', 'ba√±os', 'sal√≥n'_",
            parse_mode="Markdown"
        )
        return PREGUNTAR_LUGAR  # Repite el estado actual

async def manejar_hora(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Procesa la respuesta de la hora."""
    context.user_data["hora"] = update.message.text
    await update.message.reply_text(
        "üìù *Describe lo ocurrido:*\nMenciona qui√©nes estaban involucrados y qu√© pas√≥.",
        parse_mode="Markdown"
    )
    return PREGUNTAR_DESCRIPCION

async def manejar_descripcion(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Procesa la descripci√≥n y pide confirmaci√≥n."""
    context.user_data["descripcion"] = update.message.text
    resumen = (
        "üìã *Resumen del Reporte:*\n\n"
        f"üìç Lugar: {context.user_data['lugar']}\n"
        f"‚è∞ Hora: {context.user_data['hora']}\n"
        f"üìù Descripci√≥n: {update.message.text}\n\n"
        "¬øConfirmas que esta informaci√≥n es correcta? (S√≠/No)"
    )
    await update.message.reply_text(resumen, parse_mode="Markdown")
    return CONFIRMAR_REPORTE

async def confirmar_reporte(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Procesa la confirmaci√≥n final."""
    if update.message.text.lower() in ["s√≠", "si", "yes"]:
        # Aqu√≠ puedes guardar en base de datos
        await update.message.reply_text(

            "‚úÖ *Reporte enviado correctamente.*\nEl equipo escolar tomar√° acci√≥n.")
        # Preguntar si desea volver al men√∫
        await update.message.reply_text(
            "¬øDeseas volver al men√∫ principal?",
            reply_markup=ReplyKeyboardMarkup(
                [["S√≠, volver al men√∫", "No, continuar"]],
                one_time_keyboard=True,
                resize_keyboard=True
            )
        )
        return PREGUNTAR_VOLVER_MENU
    else:
        await update.message.reply_text("‚úèÔ∏è Vamos a empezar de nuevo.")
        return await iniciar_reporte(update, context)

async def manejar_agradecimiento(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text(
        "¬°Gracias por tu reporte! ¬øDeseas volver al men√∫ principal?",
        reply_markup=ReplyKeyboardMarkup(
            [["S√≠","s√≠", "si", "yes", "No", "no"]],
            one_time_keyboard=True,
            resize_keyboard=True
        )
    )
    return PREGUNTAR_VOLVER_MENU

async def manejar_volver_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Maneja la decisi√≥n de volver al men√∫ principal."""
    from mi_bot import botones_principales  # Importaci√≥n local para evitar circularidad
    
    texto = update.message.text.lower()
    
    if any(p in texto for p in ["s√≠", "si", "volver"]):
        # Primero enviamos el mensaje de confirmaci√≥n
        await update.message.reply_text(
            "Por favor esribe /start para reiniciar el bot.",
            reply_markup=ReplyKeyboardRemove()  # Limpiamos teclado actual
        )
        
    else:
        await update.message.reply_text(
            "De acuerdo. Puedes continuar con lo que necesites.",
            reply_markup=ReplyKeyboardRemove()
        )
    
    return ConversationHandler.END

async def cancelar(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå Reporte cancelado.")
    return ConversationHandler.END

async def confirmar_agradecimiento(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    texto = update.message.text.lower()
    if texto == ["s√≠","S√≠", "si", "yes"]:
        from ..mi_bot import botones_principales  # importa desde el archivo ra√≠z
        await update.message.reply_text(
            "Regresando al men√∫ principal...",
            reply_markup=ReplyKeyboardMarkup(botones_principales, resize_keyboard=True)
        )
    else:
        await update.message.reply_text("Entendido. Puedes escribirme cuando lo necesites.")
    return ConversationHandler.END

